# Una configuración genérica de base de datos única.

[alembic]
# ruta a los scripts de migración
script_location = alembic

# plantilla utilizada para generar nombres de archivos de migración; El valor por defecto es %%(rev)s_%%(slug)s
# Descomenta la línea de abajo si quieres que los archivos tengan prefijo de fecha y hora
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# ruta de sys.path, será agregada al sys.path si está presente.
# por defecto es el directorio de trabajo actual.
prepend_sys_path = .

# zona horaria a usar al renderizar la fecha dentro del archivo de migración
# así como en el nombre del archivo.
# Si se especifica, requiere la biblioteca python-dateutil que puede ser
# instalada agregando `alembic[tz]` a los requisitos de pip
# el valor de cadena se pasa a dateutil.tz.gettz()
# dejar en blanco para hora local
# timezone =

# longitud máxima de caracteres a aplicar al
# campo "slug"
# truncate_slug_length = 40

# establecer en 'true' para ejecutar el entorno durante
# el comando 'revision', independientemente de autogenerate
# revision_environment = false

# establecer en 'true' para permitir archivos .pyc y .pyo sin
# un archivo fuente .py para ser detectados como revisiones en el
# directorio versions/
# sourceless = false

# formato del número de versión
version_num_format = %%(version_num)04d

# separador de ruta de versión; Como se mencionó arriba, este es el carácter usado para dividir
# version_locations. El valor por defecto en archivos alembic.ini nuevos es "os", que usa
# os.pathsep. Si esta clave se omite completamente, vuelve al comportamiento
# heredado de dividir en espacios y/o comas.
# Los valores válidos para version_path_separator son:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os

# la codificación de salida utilizada cuando los archivos de revisión
# son escritos desde script.py.mako
# output_encoding = utf-8

sqlalchemy.url = postgresql://postgres:1234@localhost:5432/myevents


[post_write_hooks]
# post_write_hooks define scripts o funciones de Python que se ejecutan
# en scripts de revisión recién generados. Ver la documentación para más
# detalles y ejemplos

# formatear usando "black" - usar el runner console_scripts, contra el entrypoint "black"
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint con intentos de arreglar usando "ruff" - usar el runner exec, ejecutar un binario
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Configuración de logging
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S